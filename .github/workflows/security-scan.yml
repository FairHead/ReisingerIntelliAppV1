name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sundays at 2 AM
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Check for vulnerable packages
      run: |
        echo "Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive --format json > vulnerable-packages.json
        
        # Display results
        if [ -s vulnerable-packages.json ]; then
          echo "Found vulnerable packages:"
          cat vulnerable-packages.json
        else
          echo "No vulnerable packages found."
        fi

    - name: Check for deprecated packages
      run: |
        echo "Checking for deprecated NuGet packages..."
        dotnet list package --deprecated --format json > deprecated-packages.json
        
        if [ -s deprecated-packages.json ]; then
          echo "Found deprecated packages:"
          cat deprecated-packages.json
        else
          echo "No deprecated packages found."
        fi

    - name: Install security audit tools
      run: |
        dotnet tool install --global dotnet-retire
        dotnet tool install --global security-scan
      continue-on-error: true

    - name: Run .NET Retire security scan
      run: |
        echo "Running dotnet-retire security scan..."
        dotnet retire --outputformat json --outputfile retire-report.json || true
        
        if [ -f retire-report.json ]; then
          echo "Retire scan completed. See retire-report.json for details."
        fi
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          vulnerable-packages.json
          deprecated-packages.json
          retire-report.json
        retention-days: 30

  code-security-analysis:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install MAUI workload
      run: dotnet workload install maui

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security-focused build
      run: |
        dotnet build --configuration Release --verbosity normal \
          -p:TreatWarningsAsErrors=false \
          -p:RunAnalyzersDuringBuild=true \
          -p:EnableNETAnalyzers=true

    - name: Scan for hardcoded secrets
      run: |
        echo "Scanning for potential hardcoded secrets..."
        
        # Look for common secret patterns
        secret_patterns=(
          "password\s*=\s*['\"][^'\"]*['\"]"
          "api[_-]?key\s*=\s*['\"][^'\"]*['\"]"
          "secret\s*=\s*['\"][^'\"]*['\"]"
          "token\s*=\s*['\"][^'\"]*['\"]"
          "connectionstring\s*=\s*['\"][^'\"]*['\"]"
        )
        
        found_issues=0
        for pattern in "${secret_patterns[@]}"; do
          matches=$(grep -r -i -E "$pattern" . --include="*.cs" --include="*.xaml" --include="*.json" --exclude-dir=bin --exclude-dir=obj || true)
          if [ -n "$matches" ]; then
            echo "‚ö†Ô∏è Potential secret found with pattern: $pattern"
            echo "$matches"
            found_issues=$((found_issues + 1))
          fi
        done
        
        if [ $found_issues -eq 0 ]; then
          echo "‚úÖ No hardcoded secrets detected"
        else
          echo "‚ùå Found $found_issues potential security issues"
          echo "Please review and move secrets to secure configuration"
        fi

    - name: Check for SQL injection patterns
      run: |
        echo "Checking for potential SQL injection vulnerabilities..."
        
        # Look for string concatenation with SQL
        sql_issues=$(grep -r -E "(SELECT|INSERT|UPDATE|DELETE).*\+.*\$" . --include="*.cs" || true)
        
        if [ -n "$sql_issues" ]; then
          echo "‚ö†Ô∏è Potential SQL injection vulnerabilities found:"
          echo "$sql_issues"
        else
          echo "‚úÖ No obvious SQL injection patterns found"
        fi

    - name: Check for insecure HTTP usage
      run: |
        echo "Checking for insecure HTTP usage..."
        
        # Look for http:// URLs (should use https://)
        http_usage=$(grep -r "http://" . --include="*.cs" --include="*.xaml" --include="*.json" --exclude-dir=bin --exclude-dir=obj || true)
        
        if [ -n "$http_usage" ]; then
          echo "‚ö†Ô∏è Insecure HTTP usage found:"
          echo "$http_usage"
          echo "Consider using HTTPS instead"
        else
          echo "‚úÖ No insecure HTTP usage found"
        fi

    - name: Check file permissions and structure
      run: |
        echo "Checking file permissions and structure..."
        
        # Check for files with overly permissive permissions
        suspicious_files=$(find . -type f -perm /022 -name "*.cs" -o -name "*.xaml" -o -name "*.json" | grep -v -E "(bin/|obj/)" || true)
        
        if [ -n "$suspicious_files" ]; then
          echo "‚ö†Ô∏è Files with potentially insecure permissions:"
          echo "$suspicious_files"
        else
          echo "‚úÖ File permissions look secure"
        fi

  mobile-security-scan:
    name: Mobile Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Android security
      run: |
        echo "Checking Android-specific security..."
        
        # Check for debug flags in production
        debug_flags=$(find . -name "*.cs" -exec grep -l "Debugger\|Debug\." {} \; | grep -v -E "(bin/|obj/|Debug)" || true)
        if [ -n "$debug_flags" ]; then
          echo "‚ö†Ô∏è Debug code found in production files:"
          echo "$debug_flags"
        fi
        
        # Check for permission usage
        android_permissions=$(find . -name "*.cs" -exec grep -l "android\.permission\." {} \; || true)
        if [ -n "$android_permissions" ]; then
          echo "üì± Android permissions used in:"
          echo "$android_permissions"
          echo "Verify these permissions are necessary and properly documented"
        fi

    - name: Check iOS security
      run: |
        echo "Checking iOS-specific security..."
        
        # Check for iOS-specific security patterns
        ios_security=$(find . -name "*.cs" -exec grep -l "NSAppTransportSecurity\|NSAllowsArbitraryLoads" {} \; || true)
        if [ -n "$ios_security" ]; then
          echo "üì± iOS transport security configurations found:"
          echo "$ios_security"
          echo "Verify transport security settings are appropriate"
        fi

    - name: Check for data storage security
      run: |
        echo "Checking data storage security..."
        
        # Check for secure storage usage
        secure_storage=$(grep -r "SecureStorage" . --include="*.cs" || true)
        insecure_storage=$(grep -r -E "(File\.Write|File\.Create)" . --include="*.cs" | grep -v "Log" || true)
        
        if [ -n "$secure_storage" ]; then
          echo "‚úÖ Secure storage usage found"
        fi
        
        if [ -n "$insecure_storage" ]; then
          echo "‚ö†Ô∏è Potential insecure file operations:"
          echo "$insecure_storage"
          echo "Consider using secure storage for sensitive data"
        fi

  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check GitHub Actions security
      run: |
        echo "Checking GitHub Actions security..."
        
        # Check for potential security issues in workflows
        workflow_files=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null || true)
        
        if [ -n "$workflow_files" ]; then
          for file in $workflow_files; do
            echo "Checking $file..."
            
            # Check for secrets usage
            if grep -q "\${{ secrets\." "$file"; then
              echo "‚úÖ Secrets properly referenced in $file"
            fi
            
            # Check for pull_request_target usage (potential security risk)
            if grep -q "pull_request_target" "$file"; then
              echo "‚ö†Ô∏è pull_request_target found in $file - verify security"
            fi
            
            # Check for script injection vulnerabilities
            if grep -q "\${{ github\.event\." "$file"; then
              echo "‚ö†Ô∏è Direct event usage in $file - verify against script injection"
            fi
          done
        fi

    - name: Check Docker security (if applicable)
      run: |
        echo "Checking for Docker files..."
        docker_files=$(find . -name "Dockerfile*" -o -name "docker-compose*" || true)
        
        if [ -n "$docker_files" ]; then
          echo "Docker files found - checking basic security..."
          for file in $docker_files; do
            if grep -q "USER root" "$file"; then
              echo "‚ö†Ô∏è Root user usage in $file"
            fi
            if grep -q "RUN.*sudo" "$file"; then
              echo "‚ö†Ô∏è Sudo usage in $file"
            fi
          done
        else
          echo "No Docker files found"
        fi

  create-security-report:
    name: Create Security Report
    runs-on: ubuntu-latest
    needs: [dependency-security, code-security-analysis, mobile-security-scan, infrastructure-security]
    if: always()
    
    steps:
    - name: Download security artifacts
      uses: actions/download-artifact@v4
      with:
        name: security-reports
        path: ./security-reports
      continue-on-error: true

    - name: Generate security summary
      run: |
        echo "# Security Scan Report" > security-summary.md
        echo "" >> security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Job results
        echo "- **Dependency Security**: ${{ needs.dependency-security.result }}" >> security-summary.md
        echo "- **Code Security Analysis**: ${{ needs.code-security-analysis.result }}" >> security-summary.md
        echo "- **Mobile Security Scan**: ${{ needs.mobile-security-scan.result }}" >> security-summary.md
        echo "- **Infrastructure Security**: ${{ needs.infrastructure-security.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review all security findings in the detailed job logs" >> security-summary.md
        echo "2. Address any vulnerable dependencies immediately" >> security-summary.md
        echo "3. Ensure sensitive data uses SecureStorage" >> security-summary.md
        echo "4. Use HTTPS for all network communications" >> security-summary.md
        echo "5. Regularly update dependencies and monitor for new vulnerabilities" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check if we have any security reports
        if [ -d "./security-reports" ]; then
          echo "## Detailed Reports" >> security-summary.md
          echo "" >> security-summary.md
          echo "Detailed security reports are available in the workflow artifacts." >> security-summary.md
        fi

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90

    - name: Create security issue (if problems found)
      if: needs.dependency-security.result == 'failure' || needs.code-security-analysis.result == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security,automated',
            state: 'open'
          });
          
          // Don't create duplicate security issues
          if (issues.length === 0) {
            const fs = require('fs');
            let summary = 'Security scan completed with issues found.';
            
            if (fs.existsSync('security-summary.md')) {
              summary = fs.readFileSync('security-summary.md', 'utf8');
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîí Security issues detected by automated scan',
              body: `## Automated Security Scan Alert
              
              Security issues have been detected in the repository. Please review and address them promptly.
              
              ${summary}
              
              ### Actions Required
              - [ ] Review security scan results in workflow logs
              - [ ] Address vulnerable dependencies
              - [ ] Fix any code security issues
              - [ ] Update security documentation if needed
              
              ### Workflow Run
              [View detailed results](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ---
              *This issue was created automatically by the security scan workflow.*`,
              labels: ['security', 'automated', 'high-priority']
            });
          }

    - name: Add summary to workflow
      run: |
        echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "security-summary.md" ]; then
          cat security-summary.md >> $GITHUB_STEP_SUMMARY
        else
          echo "Security scan completed. Check individual job results for details." >> $GITHUB_STEP_SUMMARY
        fi