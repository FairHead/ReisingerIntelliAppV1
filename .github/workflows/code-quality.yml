name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install MAUI workload
      run: dotnet workload install maui

    - name: Restore dependencies
      run: dotnet restore

    - name: Build with analysis
      run: dotnet build --configuration Release --verbosity normal

    - name: Run code analysis
      run: |
        # Enable code analysis in the build
        dotnet build --configuration Release --verbosity normal -p:RunAnalyzersDuringBuild=true
      continue-on-error: true

  style-check:
    name: Code Style Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet-format
      run: dotnet tool install -g dotnet-format

    - name: Verify code formatting
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true

    - name: Check for formatting issues
      if: failure()
      run: |
        echo "Code formatting issues found. Run 'dotnet format' to fix them."
        dotnet format --dry-run --verbosity diagnostic

  lint-csharp:
    name: C# Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install MAUI workload
      run: dotnet workload install maui

    - name: Restore dependencies
      run: dotnet restore

    - name: Install analyzers
      run: |
        # Add common analyzers
        dotnet add package StyleCop.Analyzers --version 1.1.118
        dotnet add package Microsoft.CodeAnalysis.Analyzers --version 3.3.4
      continue-on-error: true

    - name: Build with analyzers
      run: dotnet build --configuration Debug --verbosity normal
      continue-on-error: true

  xaml-analysis:
    name: XAML Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install MAUI workload
      run: dotnet workload install maui

    - name: Restore dependencies
      run: dotnet restore

    - name: Analyze XAML files
      run: |
        # Check for common XAML issues
        echo "Analyzing XAML files..."
        find . -name "*.xaml" -type f | while read file; do
          echo "Checking $file"
          # Basic XAML validation
          xmllint --noout "$file" 2>/dev/null || echo "Warning: $file may have XML issues"
        done
      continue-on-error: true

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependency check tools
      run: |
        dotnet tool install --global dotnet-outdated-tool
        dotnet tool install --global dotnet-retire
      continue-on-error: true

    - name: Check for outdated packages
      run: |
        dotnet outdated
      continue-on-error: true

    - name: Check for vulnerable packages
      run: |
        dotnet list package --vulnerable
      continue-on-error: true

    - name: Audit dependencies
      run: |
        dotnet restore --verbosity normal
        echo "Dependency audit completed"

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README
      run: |
        if [ ! -f "README.md" ]; then
          echo "❌ README.md is missing"
          exit 1
        fi
        echo "✅ README.md exists"

    - name: Check documentation files
      run: |
        # Check for essential documentation
        docs_missing=0
        
        if [ ! -f "CONTRIBUTING.md" ]; then
          echo "⚠️ CONTRIBUTING.md is missing"
          docs_missing=1
        fi
        
        if [ ! -f "SECURITY.md" ]; then
          echo "⚠️ SECURITY.md is missing"
          docs_missing=1
        fi
        
        if [ $docs_missing -eq 0 ]; then
          echo "✅ All essential documentation files exist"
        else
          echo "⚠️ Some documentation files are missing"
        fi

    - name: Check code comments
      run: |
        # Check for XML documentation in C# files
        echo "Checking for XML documentation comments..."
        cs_files=$(find . -name "*.cs" -type f | grep -v bin | grep -v obj | wc -l)
        documented_methods=$(grep -r "///" . --include="*.cs" | wc -l)
        echo "Found $cs_files C# files"
        echo "Found $documented_methods XML documentation comments"

  copilot-readiness:
    name: Copilot Readiness Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Copilot configuration
      run: |
        echo "Checking Copilot readiness..."
        
        # Check for Copilot instructions
        if [ ! -f ".github/copilot-instructions.md" ]; then
          echo "⚠️ Copilot instructions file missing"
        else
          echo "✅ Copilot instructions found"
        fi
        
        # Check for VS Code settings
        if [ ! -f ".vscode/settings.json" ]; then
          echo "⚠️ VS Code settings missing"
        else
          echo "✅ VS Code settings found"
        fi

    - name: Analyze code structure for Copilot
      run: |
        # Check naming conventions
        echo "Analyzing naming conventions..."
        
        # Check for clear file names
        unclear_names=$(find . -name "*.cs" -type f | grep -E "(temp|test|new|copy)" | head -5)
        if [ -n "$unclear_names" ]; then
          echo "⚠️ Found files with unclear names:"
          echo "$unclear_names"
        fi
        
        # Check for descriptive method names
        echo "Checking for descriptive method names..."
        short_methods=$(grep -r "public.*(" . --include="*.cs" | grep -E "(Do|Get|Set)[^A-Z]" | head -3)
        if [ -n "$short_methods" ]; then
          echo "⚠️ Found potentially unclear method names"
        fi

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [code-analysis, style-check, lint-csharp, xaml-analysis, dependency-check, documentation-check, copilot-readiness]
    if: always()
    
    steps:
    - name: Generate quality report
      run: |
        echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.code-analysis.result }}" == "success" ]; then
          echo "✅ Static Code Analysis: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Static Code Analysis: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.style-check.result }}" == "success" ]; then
          echo "✅ Code Style Check: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Style Check: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.documentation-check.result }}" == "success" ]; then
          echo "✅ Documentation Quality: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Documentation Quality: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.copilot-readiness.result }}" == "success" ]; then
          echo "✅ Copilot Readiness: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Copilot Readiness: Failed" >> $GITHUB_STEP_SUMMARY
        fi