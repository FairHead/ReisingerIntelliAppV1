name: GitHub Copilot Setup Guide
description: Step-by-step guide to set up and optimize GitHub Copilot for the ReisingerIntelliAppV1 project

steps:
  - name: Prerequisites
    description: Ensure you have the necessary prerequisites
    tasks:
      - action: Verify GitHub Copilot subscription
        details: Ensure you have an active GitHub Copilot subscription (Individual or Business)
        validation: Check GitHub account settings under "Copilot"
      
      - action: Install Visual Studio 2022 or VS Code
        details: Use the latest version with MAUI workload installed
        requirements:
          - Visual Studio 2022 17.4+ or VS Code with C# extension
          - .NET MAUI workload
          - C# Dev Kit extension (for VS Code)

  - name: Copilot Installation
    description: Install and configure GitHub Copilot
    tasks:
      - action: Install Copilot extension
        details: Install the appropriate extension for your IDE
        options:
          visual_studio: GitHub Copilot extension from Visual Studio Marketplace
          vs_code: GitHub Copilot and GitHub Copilot Chat extensions
        validation: Verify installation in IDE extensions/tools menu

      - action: Sign in to GitHub
        details: Authenticate with your GitHub account
        command: Use "GitHub Copilot: Sign In" command
        validation: Check that Copilot shows as "authenticated" in status bar

  - name: Project-Specific Configuration
    description: Configure Copilot for optimal performance with this MAUI project
    tasks:
      - action: Open project workspace
        details: Open the ReisingerIntelliAppV1 solution/workspace
        files_to_open:
          - ReisingerIntelliAppV1.sln
          - .github/copilot-instructions.md
          - Key source files for context

      - action: Configure VS Code settings (if using VS Code)
        details: Apply the recommended settings from .vscode/settings.json
        settings:
          - Enable Copilot for all file types
          - Configure C# language server
          - Set up MAUI debugging
        
      - action: Review Copilot instructions
        details: Read the project-specific Copilot instructions
        file: .github/copilot-instructions.md
        purpose: Understand project patterns and conventions

  - name: Verification and Testing
    description: Verify Copilot is working correctly with the project
    tasks:
      - action: Test basic code completion
        details: Test Copilot suggestions in a simple scenario
        test_files:
          - Open any .cs file in Services/ folder
          - Start typing a new method
          - Verify Copilot provides relevant suggestions
        
      - action: Test MAUI-specific suggestions
        details: Verify Copilot understands MAUI patterns
        scenarios:
          - XAML binding syntax
          - MVVM ViewModel patterns
          - Async API method implementations
          - Platform-specific code sections

      - action: Test Copilot Chat
        details: Verify Copilot Chat functionality
        test_queries:
          - "Explain this DeviceService class"
          - "How to add a new API method to IntellidriveApiService?"
          - "Show me the MVVM pattern used in this project"

  - name: Optimization
    description: Optimize Copilot for your workflow
    tasks:
      - action: Customize suggestion triggers
        details: Adjust when and how Copilot provides suggestions
        settings:
          - Inline suggestions frequency
          - Auto-accept settings
          - Language-specific configurations

      - action: Set up Copilot shortcuts
        details: Configure keyboard shortcuts for common Copilot actions
        shortcuts:
          accept_suggestion: Tab (default)
          reject_suggestion: Esc
          next_suggestion: Alt + ]
          previous_suggestion: Alt + [
          toggle_copilot: Ctrl + Shift + A

      - action: Configure exclusions
        details: Set up files/patterns to exclude from Copilot
        exclude_patterns:
          - bin/
          - obj/
          - *.Designer.cs
          - Migrations/
          - packages/

  - name: Team Integration
    description: Set up Copilot for team collaboration
    tasks:
      - action: Share configuration
        details: Ensure team members use consistent Copilot settings
        shared_files:
          - .vscode/settings.json
          - .github/copilot-instructions.md
          - Code style guidelines

      - action: Establish team guidelines
        details: Create team conventions for Copilot usage
        guidelines:
          - When to accept/reject suggestions
          - Code review practices for Copilot-generated code
          - Documentation requirements
          - Testing requirements

  - name: Advanced Features
    description: Leverage advanced Copilot features
    tasks:
      - action: Use Copilot Chat effectively
        details: Learn to use Copilot Chat for complex scenarios
        use_cases:
          - Code explanation and documentation
          - Refactoring suggestions
          - Test generation
          - Architecture questions

      - action: Prompt engineering
        details: Learn to write effective prompts/comments
        techniques:
          - Descriptive method names
          - Clear comment instructions
          - Context-rich variable names
          - Consistent coding patterns

      - action: Code review integration
        details: Use Copilot for code review assistance
        practices:
          - Review Copilot-generated code carefully
          - Use pull request templates for Copilot contributions
          - Document Copilot usage in PRs

  - name: Troubleshooting
    description: Common issues and solutions
    tasks:
      - action: Verify Copilot status
        details: Check Copilot is active and working
        indicators:
          - Status bar shows Copilot icon
          - No authentication errors
          - Suggestions appear when typing

      - action: Reset Copilot if needed
        details: Steps to reset Copilot configuration
        steps:
          - Sign out and sign back in
          - Reload/restart IDE
          - Clear Copilot cache if available
          - Reinstall extension if necessary

      - action: Performance optimization
        details: Improve Copilot performance if slow
        optimizations:
          - Close unnecessary files/tabs
          - Reduce project size in workspace
          - Update IDE and extensions
          - Check network connectivity

success_criteria:
  - Copilot provides relevant C# and MAUI suggestions
  - Copilot Chat responds appropriately to project questions
  - Team members can collaborate effectively with Copilot
  - Code quality and consistency improve with Copilot usage
  - Development velocity increases

maintenance:
  - Regularly update Copilot extensions
  - Review and update copilot-instructions.md
  - Collect team feedback on Copilot effectiveness
  - Monitor Copilot usage analytics (if available)
  - Update configurations based on new features

support_resources:
  - GitHub Copilot Documentation: https://docs.github.com/en/copilot
  - Project-specific instructions: .github/copilot-instructions.md
  - Team guidelines: CONTRIBUTING.md
  - Issue tracking: Use "copilot" label for Copilot-related issues